#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <iomanip>
using namespace std;

double phi(double x);


int main() {
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */  
    double zscore = 1.96; /* 95% of the area under a normal curve lies within roughly 1.96 standard deviations of the mean, and due to the central limit theorem, this number is therefore used in the construction of approximate 95% confidence intervals. - From wiki of 1.96*/ 
    double nSampleCount = 100.00;
    double mean = 500.00  ;
    double sd = 80.00;
    //No Need to worry about 95% value as this is same as 1.96

    
   //in >> zscore;
   //in >> nSampleCount;
   //in >> mean;
   //in >> sd;
    
    double NormalDistMean = mean * nSampleCount;
    double NormalDistSD = sd * sqrt(nSampleCount);

   
  // cout << sd/sqrt(nSampleCount) << endl;
  //cout  << ((NormalDistMean - 0 * zscore)/1)  << endl;//Lower level
    cout << (((NormalDistMean) - (NormalDistSD * zscore))/nSampleCount)  << endl;//Lower level
    cout << (((NormalDistMean) + (NormalDistSD * zscore))/nSampleCount)  << endl;//Higher level

   
   
    return 0;
}



double phi(double x)
{
    // constants
    double a1 =  0.254829592;
    double a2 = -0.284496736;
    double a3 =  1.421413741;
    double a4 = -1.453152027;
    double a5 =  1.061405429;
    double p  =  0.3275911;

    // Save the sign of x
    int sign = 1;
    if (x < 0)
        sign = -1;
    x = fabs(x)/sqrt(2.0);

    // A&S formula 7.1.26
    double t = 1.0/(1.0 + p*x);
    double y = 1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x);

    return 0.5*(1.0 + sign*y);
}
